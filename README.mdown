fend (Fast EveNt Dispatch)
==========================

fend is an event framework utilising LuaJIT's ffi.

It currently only has an epoll based dispatcher; so use is limited to linux based devices.

Most functions can raise errors.

Installation
------------

Just place the `fend` directory in your lua module search path


Modules
-------

### FD
This module wraps raw file descriptors (ints) in a structure to attach methods.

The module returns a constructor that takes the raw file descriptor:
``` lua
    new_fd = require "fend.fd"
    stdin = new_fd ( 0 )`
```

 - `fd:getfd ( )` returns the raw file descriptor
 - `fd:set_blocking ( bool )` sets the `O_NONBLOCK` flag


### Socket
A non-blocking luasocket-like interface

 - `sock = socket.new_tcp ( domain )` creates a new socket with the given domain (where `domain` is an `AF_*`; these can conviniently be found in an addrinfo structure: `addrinfo.ai_family` (see DNS section))
 - `sock:getfd ( )` returns the raw file descriptor for the socket
 - `sock:set_option ( option , val )` calls `setsockopt` with the given option (a string, eg `"REUSEADDR"`) and `int` val
 - `sock:bind ( addrinfo )` binds the socket to the interface given in `addrinfo`
 - `sock:listen ( backlog )` sets the socket to listen with the given backlog (defaults to 128)
 - `sock:accept ( with_sockaddr )` accepts a new client on `sock`. the returned socket will have `O_NONBLOCK` set. if `with_sockaddr` is true, the call will return a `sockaddr` and it's length as extra return values
 - `sock:shutdown ( )`
 - `sock:recv ( buff , len , flags )` `buff` should be a user allocated buffer of length `len`. `flags` defaults to `0`
 - `sock:send ( buff , len , flags )` if `buff` is not a `const char*` then it will have `tostring` called on it. if `len` is not given, it is the length of the string. `flags` defaults to `0`
 - `sock:getpeername ( )` returns a `sockaddr` and it's length representing the connected peer

### SSL
Provides a luasec-like interface (even supporting the same context types)

### DNS
Provides dns and host based utilities.

 - `dns.lookup ( hostname , port )` does a blocking lookup, returning an `addrinfo` structure
 - `dns.lookup_async ( hostname , port , epoll_ob , cb )` does a non-blocking dns lookup, and when ready (dispatched via the `epoll_ob`), will call callback `cb` with an `addrinfo` structure.


Examples
--------

 - `examples/all.lua` is a demonstration of every module working together


Extra Information
-----------------

The `include` directory contains a partial replication of processed files from the `/usr/include` directory.
